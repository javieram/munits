<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd ">
    <munit:config name="sample-api-apikit-test.xml" />
    <http:request-config name="HTTP_Request_Configuration" basePath="/api">
        <http:request-connection host="localhost" port="8081" />
    </http:request-config>
    <munit:test name="put:\users\(userId):application\json:sample-api-config-200-application\json-FlowTest" description="Verifying functionality of [put:\users\(userId):application\json:sample-api-config-200-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="put:\users\(userId):application\json:sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/put_users_{userid}_application_json.json')]" />
            <set-variable variableName="userId" value="#['1']" doc:name="userId" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="829086bb-0db0-49cc-8fd1-96be63f5bfd2" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="d08489a9-43d1-4854-8298-a12a4629fc51" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[{}]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="PUT" path="#['/users/$(vars.userId)']">
                <http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="edfc4709-1475-473e-a819-cec1d10c4272" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/put_200_users_{userid}_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
	<munit:test name="put:\users\(userId):application\json:sample-api-config-400-application\json-FlowTest" description="Verifying functionality of [put:\users\(userId):application\json:sample-api-config-400-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="put:\users\(userId):application\json:sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/put_users_{userid}_application_json.json')]" />
            <set-variable variableName="userId" value="#['1']" doc:name="userId" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="4f460649-1878-416a-a27d-ced9171728c0" processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="d08489a9-43d1-4854-8298-a12a4629fc51" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:TIMEOUT" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="PUT" path="#['/users/$(vars.userId)']">
                <http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="400" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 400" />
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="0577274f-4926-41d8-8e48-4d042d61e743" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/put_400_users_{userid}_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
    <munit:test name="put:\users\(userId):application\json:sample-api-config-403-application\json-FlowTest" description="Verifying functionality of [put:\users\(userId):application\json:sample-api-config-403-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="put:\users\(userId):application\json:sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/put_users_{userid}_application_json.json')]" />
            <set-variable variableName="userId" value="#['1']" doc:name="userId" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="22aa7a6b-e722-4206-b351-d6c201a52eaa" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="d08489a9-43d1-4854-8298-a12a4629fc51" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:FORBIDDEN" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="PUT" path="#['/users/$(vars.userId)']">
                <http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="403" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(403)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 403" />
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="5514b734-5e0e-4c26-bada-b29da09a6419" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/put_403_users_{userid}_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
    <munit:test name="put:\users\(userId):application\json:sample-api-config-404-application\json-FlowTest" description="Verifying functionality of [put:\users\(userId):application\json:sample-api-config-404-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="put:\users\(userId):application\json:sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/put_users_{userid}_application_json.json')]" />
            <set-variable variableName="userId" value="#['1']" doc:name="userId" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="51a2e52b-b292-4424-ab3d-010a77dc8506" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="d08489a9-43d1-4854-8298-a12a4629fc51" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:NOT_FOUND" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="PUT" path="#['/users/$(vars.userId)']">
                <http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="404" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(404)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 404" />
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="c5d7252c-5c9d-44a4-a6c4-5fab878c64cf" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/put_404_users_{userid}_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
    <munit:test name="put:\users\(userId):application\json:sample-api-config-500-application\json-FlowTest" description="Verifying functionality of [put:\users\(userId):application\json:sample-api-config-500-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="put:\users\(userId):application\json:sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/put_users_{userid}_application_json.json')]" />
            <set-variable variableName="userId" value="#['1']" doc:name="userId" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="8f1a308a-4c8c-46e6-a2c4-c5552b622af2" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="d08489a9-43d1-4854-8298-a12a4629fc51" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="EXPRESSION" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="PUT" path="#['/users/$(vars.userId)']">
                <http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="500" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(500)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 500" />
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="b976bbbf-430a-45c4-b745-e725e6b3c8b5" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/put_500_users_{userid}_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\users:sample-api-config-200-application\json-FlowTest" description="Verifying functionality of [get:\users:sample-api-config-200-application\json]" timeOut="12000000">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="get:\users:sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="bb81b0d8-41fc-4039-83e2-1e6ce5d29e44" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="HTTP_Request_openlibrary" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[{}]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/users">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
                <http:query-params>#[{"offset":"0","limit":"10"}]</http:query-params>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="c62b07f7-117b-44d1-af1d-28e88147e6e7" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/get_200_users_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\users:sample-api-config-400-application\json-FlowTest" description="Verifying functionality of [get:\users:sample-api-config-400-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="get:\users:sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="5a5a8e9d-376f-4d1d-9deb-5f4e4288f21d" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="HTTP_Request_openlibrary" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:TIMEOUT" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/users">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
                <http:query-params>#[{"offset":"0","limit":"10"}]</http:query-params>
                <http:response-validator>
                    <http:success-status-code-validator values="400" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 400" />
            <munit-tools:assert-equals doc:name="Assert equals" doc:id="d6655ba8-649c-4a69-af2c-3b8c9eb479d2" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/get_400_users_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\users:sample-api-config-403-application\json-FlowTest" description="Verifying functionality of [get:\users:sample-api-config-403-application\json]" timeOut="12000000">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="get:\users:sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="e26021a0-cfdc-4915-98ae-68b7a117da74" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="HTTP_Request_openlibrary" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:FORBIDDEN" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/users">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
                <http:query-params>#[{"offset":"0","limit":"10"}]</http:query-params>
                <http:response-validator>
                    <http:success-status-code-validator values="403" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(403)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 403" />
            <munit-tools:assert-equals doc:name="Assert equals" doc:id="9a4ea067-75e9-4199-9364-d091baf1b959" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/get_403_users_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\users:sample-api-config-404-application\json-FlowTest" description="Verifying functionality of [get:\users:sample-api-config-404-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="get:\users:sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="b1a040c2-ec6b-4755-b96b-ddcc92005ed9" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="HTTP_Request_openlibrary" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:NOT_FOUND" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/users">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
                <http:query-params>#[{"offset":"0","limit":"10"}]</http:query-params>
                <http:response-validator>
                    <http:success-status-code-validator values="404" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(404)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 404" />
            <munit-tools:assert-equals doc:name="Assert equals" doc:id="063466e3-1111-4abf-afc3-1a8d7c69f3ee" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/get_404_users_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\users:sample-api-config-500-application\json-FlowTest" description="Verifying functionality of [get:\users:sample-api-config-500-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="get:\users:sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="f2c18c5a-5aeb-4c01-b91a-fe1a4f6faa5b" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="HTTP_Request_openlibrary" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="EXPRESSION" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/users">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
                <http:query-params>#[{"offset":"0","limit":"10"}]</http:query-params>
                <http:response-validator>
                    <http:success-status-code-validator values="500" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(500)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 500" />
            <munit-tools:assert-equals doc:name="Assert equals" doc:id="68ad06fc-869a-43bc-a786-55c0f2270911" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/get_500_users_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\users\(userId):sample-api-config-200-application\json-FlowTest" description="Verifying functionality of [get:\users\(userId):sample-api-config-200-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="get:\users\(userId):sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="userId" value="#['1']" doc:name="userId" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="36d06e96-2ae1-46bc-ab24-7900dafc5810" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="b7956162-ff42-48b4-a514-c2281a30226b" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[{}]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="#['/users/$(vars.userId)']">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="4164193e-6032-4e19-a85e-706f09c6e0f3" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/get_200_users_{userid}_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!"/>
        </munit:validation>
    </munit:test>
    <munit:test name="get:\users\(userId):sample-api-config-400-application\json-FlowTest" description="Verifying functionality of [get:\users\(userId):sample-api-config-400-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="get:\users\(userId):sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="userId" value="#['1']" doc:name="userId" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="1c17ddff-9509-4076-9fc5-d81cd70bf789" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="b7956162-ff42-48b4-a514-c2281a30226b" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:TIMEOUT" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="#['/users/$(vars.userId)']">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="400" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 400" />
            <munit-tools:assert-equals doc:name="Assert equals" doc:id="114bc5ea-a1d6-4d40-891c-2acca31aef50" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/get_400_users_{userid}_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\users\(userId):sample-api-config-403-application\json-FlowTest" description="Verifying functionality of [get:\users\(userId):sample-api-config-403-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="get:\users\(userId):sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="userId" value="#['1']" doc:name="userId" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="c087cef3-7819-46fa-9c61-ed0e7210de11" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="b7956162-ff42-48b4-a514-c2281a30226b" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:FORBIDDEN" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="#['/users/$(vars.userId)']">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="403" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(403)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 403" />
            <munit-tools:assert-equals doc:name="Assert equals" doc:id="4e5b9376-091a-436a-9b27-ef17922149f6" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/get_403_users_{userid}_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\users\(userId):sample-api-config-404-application\json-FlowTest" description="Verifying functionality of [get:\users\(userId):sample-api-config-404-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="get:\users\(userId):sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="userId" value="#['1']" doc:name="userId" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="2c542cf0-e158-4794-9b79-d6e277b4bdf5" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="b7956162-ff42-48b4-a514-c2281a30226b" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:NOT_FOUND" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="#['/users/$(vars.userId)']">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="404" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(404)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 404" />
            <munit-tools:assert-equals doc:name="Assert equals" doc:id="fab10550-94a3-4e55-84d1-934271b5f4ad" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/get_404_users_{userid}_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
    <munit:test name="get:\users\(userId):sample-api-config-500-application\json-FlowTest" description="Verifying functionality of [get:\users\(userId):sample-api-config-500-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="get:\users\(userId):sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="userId" value="#['1']" doc:name="userId" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="dcd46c8f-69ee-4dfc-ae5c-ea8c5a202c2b" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="b7956162-ff42-48b4-a514-c2281a30226b" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="EXPRESSION" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="#['/users/$(vars.userId)']">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="500" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(500)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 500" />
            <munit-tools:assert-equals doc:name="Assert equals" doc:id="6b23bc14-bab7-4e87-8242-509d64ada766" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/get_500_users_{userid}_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
    <munit:test name="post:\users:application\json:sample-api-config-201-application\json-FlowTest" description="Verifying functionality of [post:\users:application\json:sample-api-config-201-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="post:\users:application\json:sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/post_users_application_json.json')]" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="b23608a4-127f-4cf7-9a7e-0338d3b03478" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="782cdd95-2517-4263-af5f-0d840a0bc14f" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[{}]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/users">
                <http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(201)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 201" />
            <munit-tools:assert-equals doc:name="Assert equals" doc:id="8ae1e82b-17ba-4615-8da2-b44d54590095" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/post_201_users_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
    <munit:test name="post:\users:application\json:sample-api-config-400-application\json-FlowTest" description="Verifying functionality of [post:\users:application\json:sample-api-config-400-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="post:\users:application\json:sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/post_users_application_json.json')]" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="88b334df-47d5-485f-9b78-e6c5321334e5" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="782cdd95-2517-4263-af5f-0d840a0bc14f" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[{}]" />
					<munit-tools:error typeId="HTTP:TIMEOUT" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/users">
                <http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="400" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 400" />
            <munit-tools:assert-equals doc:name="Assert equals" doc:id="f5be501a-cf42-45f9-86b4-16d2ac6d233a" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/post_400_users_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
    <munit:test name="post:\users:application\json:sample-api-config-403-application\json-FlowTest" description="Verifying functionality of [post:\users:application\json:sample-api-config-403-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="post:\users:application\json:sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/post_users_application_json.json')]" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="7e5c4df1-2e57-4716-8d7b-af94f033979a" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="782cdd95-2517-4263-af5f-0d840a0bc14f" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[{}]" />
					<munit-tools:error typeId="HTTP:FORBIDDEN" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/users">
                <http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="403" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(403)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 403" />
            <munit-tools:assert-equals doc:name="Assert equals" doc:id="8dfe8b49-f100-42f4-9218-0cdb8a7c451e" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/post_403_users_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
    <munit:test name="post:\users:application\json:sample-api-config-404-application\json-FlowTest" description="Verifying functionality of [post:\users:application\json:sample-api-config-404-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="post:\users:application\json:sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/post_users_application_json.json')]" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="41028ff1-4b9b-4340-b57b-0b981187c52d" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="782cdd95-2517-4263-af5f-0d840a0bc14f" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[{}]" />
					<munit-tools:error typeId="HTTP:NOT_FOUND" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/users">
                <http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="404" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(404)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 404" />
            <munit-tools:assert-equals doc:name="Assert equals" doc:id="21204379-82e1-4516-9673-09185da3b6c9" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/post_404_users_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
    <munit:test name="post:\users:application\json:sample-api-config-500-application\json-FlowTest" description="Verifying functionality of [post:\users:application\json:sample-api-config-500-application\json]">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="sample-api-main" />
            <munit:enable-flow-source value="post:\users:application\json:sample-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/post_users_application_json.json')]" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="752a5a11-5bac-4079-8a99-a3e1583babd3" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="782cdd95-2517-4263-af5f-0d840a0bc14f" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[{}]" />
					<munit-tools:error typeId="EXPRESSION" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/users">
                <http:headers>#[{"Accept":"application/json","Content-Type":"application/json"}]</http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="500" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(500)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 500" />
            <munit-tools:assert-equals doc:name="Assert equals" doc:id="9780e0c3-2782-4dfa-a6d3-395792f45484" actual="#[payload]" expected="#[readUrl('classpath://scaffolder/response/post_500_users_application_json.json', &quot;application/json&quot;)]" message="The response payload is not correct!" />
        </munit:validation>
    </munit:test>
</mule>
